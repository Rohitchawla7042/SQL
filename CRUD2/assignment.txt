Q1. Top 5 popular movies
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Find the movie titles, taglines, and directors for the top 5 popular movies.

Return the columns 'original_title', 'tagline', and 'director'.
Dataset description for movies table:

1) id - tmdb movie id

2) imdb_id - imdb movie id

3) popularity -A numeric quantity specifying the movie's popularity.

4) budget -The budget in which the movie was made.

5) revenue - The worldwide revenue generated by the movie.

6) original_title- The title of the movie

7) cast - The name of the lead and supporting actors.

8) homepage - A link to the homepage of the movie.

9) director - The name of the director of the movie

10) tagline - Movie's tagline.

11) keywords -The keywords or tags related to the movie.

12) overview -A brief description of the movie.

13) runtime -The running time of the movie in minutes.

14) genres -The genres of the movies

15) production_companies-The production house of the movie.

16) release_date -the date on which it was released.

17) vote_count -the count of votes received.

18) vote_average - average ratings the movie received.

19) release_year - the year on which it was released.

Sample Input:

Table: movies



Sample Output:






/* YOUR QUERY GOES HERE
   Example: SELECT * FROM movies; 
*/

select original_title , tagline , director 
from movies 
order by popularity desc limit 5; 



Q2. Low Fat & Recyclable Products
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Write a query to find the ids of products that are both low-fat and recyclable.

Return the result table ordered by product_id in ascending order.
Table: products
Schema

Sample Input:

Table: products



Sample output:



Explanation:

Only products 1 and 3 are both low-fat and recyclable.




/* YOUR QUERY GOES HERE
   Example: SELECT * FROM products; 
*/

select product_id from products 
where (low_fats = 'Y' and recyclable = 'Y')
order by product_id ; 

/* YOUR QUERY GOES HERE
   Example: SELECT * FROM products; 
*/

select product_id from products 
where (low_fats = 'Y' and recyclable = 'Y')
order by product_id ; 

/* YOUR QUERY GOES HERE
   Example: SELECT * FROM customers; 
*/

-- select customerName,phone,addressLine1,city,state,postalCode 
-- from customers where country != "Germany"
-- order by customerName asc ; 

-- SELECT customerName,phone,addressLine1,city,state,postalCode
-- FROM customers WHERE country!='Germany' ORDER BY customerName;

SELECT customerName, phone, addressLine1 as addressline1, city, state, postalCode as postalcode FROM customers
WHERE country not like 'Germany' ORDER BY customerName ASC;


Q4. Patients With a Condition
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Write an SQL query to report the patient_id who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix.

Table: patients



Sample Input:

Table: patients
input

Sample Output:
Output

Explanation: Patients with id 10 and 12 have Type I Diabetes as conditions have words having 'DIAB1' as prefix





/* YOUR QUERY GOES HERE
   Example: SELECT * FROM EMPLOYEE; 
*/

-- select patient_id from patients 
-- where conditions like "DIAB1%" or conditions like "%DIAB1%" ; 

SELECT patient_id FROM patients WHERE conditions LIKE "DIAB1%" OR conditions LIKE "% DIAB1%" ;

Q5. 2012-2015
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Find the details of the movies that are released between the years 2012-2015 i.e., (Including 2012 and 2015).

Return the columns 'original_title', 'genres', 'vote_average', and 'revenue'.
Return the result ordered by original_title in ascending order.
Dataset description for movies table:

1) id - tmdb movie id

2) imdb_id - imdb movie id

3) popularity -A numeric quantity specifying the movie's popularity.

4) budget -The budget in which the movie was made.

5) revenue - The worldwide revenue generated by the movie.

6) original_title- The title of the movie

7) cast - The name of the lead and supporting actors.

8) homepage - A link to the homepage of the movie.

9) director - The name of the director of the movie

10) tagline - Movie's tagline.

11) keywords -The keywords or tags related to the movie.

12) overview -A brief description of the movie.

13) runtime -The running time of the movie in minutes.

14) genres -The genres of the movies

15) production_companies-The production house of the movie.

16) release_date -the date on which it was released.

17) vote_count -the count of votes received.

18) vote_average - average ratings the movie received.

19) release_year - the year on which it was released.

Sample Input:

Table: movies



Sample Output:



/* YOUR QUERY GOES HERE
   Example: SELECT * FROM movies; 
*/

select original_title , genres, vote_average , revenue 
from movies where release_year between 2012 and 2015 
order by original_title asc ; 

Q6. Olympic Table
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Write a SQL query to sort the olympic table according to the following rules:

The country with more gold medals should come first.
If there is a tie in the no. of gold medals, the country with more silver medals should come first.
If there is a tie in the no. of silver medals, the country with more bronze medals should come first.
If there is a tie in the no. of bronze medals as well, then the countries with the tie are sorted in ascending order lexicographically.
Table: olympic
Schema

Sample Input:

Table: olympic



Sample output:



Explanation:

The tie between China and USA is broken by their lexicographical names.
Since "China" is lexicographically smaller than "USA", it comes first.
Israel comes before Egypt because it has more bronze medals.

/* YOUR QUERY GOES HERE
   Example: SELECT * FROM olympic; 
*/

select * from olympic 
order by
gold_medals desc , 
silver_medals desc , 
bronze_medals desc , 
country asc ;  


Q7. Keywords
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Write a query to list down all the movies along with their details that have keywords like 'sport' or 'sequel' or 'suspense'.

Note:

Return the columns 'original_title', 'director', 'genres', 'cast', 'budget', 'revenue', 'runtime', and 'vote_average'.
Return the columns ordered by original_title in ascending order.
Dataset description for 'movies' table:

id - tmdb movie id
imdb_id - imdb movie id
popularity - A numeric quantity specifying the movie popularity.
budget - The budget in which the movie was made.
revenue - The worldwide revenue generated by the movie.
original_title - The title of the movie
cast - The name of the lead and supporting actors.
homepage - A link to the homepage of the movie.
director - The name of the director of the movie
tagline - Movie tagline.
keywords - The keywords or tags related to the movie.
overview - A brief description of the movie.
runtime - The running time of the movie in minutes.
genres - The genres of the movies
production_companies - The production house of the movie.
release_date - the date on which it was released.
vote_count - the count of votes received.
vote_average - average ratings the movie received.
release_year - the year in which it was released.
Sample Input:

Table: movies



Sample output:



/* YOUR QUERY GOES HERE
   Example: SELECT * FROM movies; 
*/

select original_title , director , genres, `cast` , budget , revenue , runtime , vote_average 
from movies where keywords like "%sport%"
or keywords like "%sequel%"
or keywords like "%suspense%"
order by original_title asc ; 


