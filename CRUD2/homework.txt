Problem Statement:

Write a query to get the list of city names starting with vowels (i.e., a, e, i, o, or u) from station table.

The result should not contain duplicate values.

Return the result table ordered by city in ascending order.

Table: station
Schema

Sample Input:

Table: station



Sample output:



Explanation: The above table has unique city names starting with vowels (i.e., a, e, i, o, or u) and is ordered by city in ascending order.




/* YOUR QUERY GOES HERE
   Example: SELECT * FROM station; 
*/


select distinct city from station where city like 'a%' or city like 'e%' or city like 'i%' or city like 'o%' or city like 'u%' order by city asc;



2. Problems that are low quality
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Write a query to report the IDs of the low-quality problems.

A problem is low-quality if the like percentage of the problem (the number of likes divided by the total number of votes) is strictly less than 60%.

Return the result table ordered by problem_id in ascending order.
Table: problems

schema

Sample Input:

Table: problems



Sample output:



Explanation:

The like percentages are as follows:

Problem 1: (4446 / (4446 + 2760)) * 100 = 61.69858%
Problem 6: (1290 / (1290 + 425)) * 100 = 75.21866%
Problem 7: (8569 / (8569 + 6086)) * 100 = 58.47151%
Problem 10: (9002 / (9002 + 7446)) * 100 = 54.73006%
Problem 11: (2677 / (2677 + 8659)) * 100 = 23.61503%
Problem 13: (2050 / (2050 + 4164)) * 100 = 32.99002%
Problems 7, 10, 11, and 13 are low-quality problems because their like percentages are less than 60%.




select problem_id from problems 
where ((likes/(likes+dislikes))*100) < 60
order by problem_id; 

Q3. Article Views II
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Write a query to find all the people who viewed more than one article on the same date.

Save the viewer_id as the id.
Return the result sorted by id in ascending order.
Sample Input:

Table: views



Sample output:



Sample Explanation:

Viewer with id 5 viewed two articles on 2019-08-01.
Viewer with id 6 viewed two articles on 2019-08-02.
Viewer with id 4 viewed the same article two times. Hence, not included.

/* YOUR QUERY GOES HERE
   Example: SELECT * FROM views; 
*/

select Distinct viewer_id as id from views 
group by viewer_id , view_date 
having count(Distinct article_id) > 1 
order by viewer_id ;

-- SELECT Distinct viewer_id as id
-- FROM views
-- GROUP BY viewer_id, view_date
-- HAVING COUNT(DISTINCT article_id) > 1
-- ORDER BY viewer_id;


