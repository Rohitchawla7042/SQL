Q1. Movies released after 2014
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Write a query to display the titles of the movies that are released (i.e., release_year) after 2014 and have an average vote rating (i.e.,vote_average) greater than 7.

Return the column 'original_title'.
Return the result ordered by original_title in ascending order.
Dataset description for movies table:

1) id - tmdb movie id

2) imdb_id - imdb movie id

3) popularity -A numeric quantity specifying the movie's popularity.

4) budget -The budget in which the movie was made.

5) revenue - The worldwide revenue generated by the movie.

6) original_title- The title of the movie

7) cast - The name of the lead and supporting actors.

8) homepage - A link to the homepage of the movie.

9) director - The name of the director of the movie

10) tagline - Movie's tagline.

11) keywords -The keywords or tags related to the movie.

12) overview -A brief description of the movie.

13) runtime -The running time of the movie in minutes.

14) genres -The genres of the movies

15) production_companies-The production house of the movie.

16) release_date -the date on which it was released.

17) vote_count -the count of votes received.

18) vote_average - average ratings the movie received.

19) release_year - the year on which it was released.

Sample Input:

Table: movies



Sample Output:




/* YOUR QUERY GOES HERE
   Example: SELECT * FROM movies; 
*/
SELECT original_title FROM 
movies 
where release_year > 2014 AND vote_average > 7 
order by original_title ; 


Q2. Horror genre
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Display the details of the movies which belong to the 'Horror' genre.

Return the columns 'original_title', and 'popularity'.
Return the result ordered by the popularity in descending order.
Dataset description for movies table:

1) id - tmdb movie id

2) imdb_id - imdb movie id

3) popularity -A numeric quantity specifying the movie's popularity.

4) budget -The budget in which the movie was made.

5) revenue - The worldwide revenue generated by the movie.

6) original_title- The title of the movie

7) cast - The name of the lead and supporting actors.

8) homepage - A link to the homepage of the movie.

9) director - The name of the director of the movie

10) tagline - Movie's tagline.

11) keywords -The keywords or tags related to the movie.

12) overview -A brief description of the movie.

13) runtime -The running time of the movie in minutes.

14) genres -The genres of the movies

15) production_companies-The production house of the movie.

16) release_date -the date on which it was released.

17) vote_count -the count of votes received.

18) vote_average - average ratings the movie received.

19) release_year - the year on which it was released.

Sample Input:

Table: movies



Sample Output:



/* YOUR QUERY GOES HERE
   Example: SELECT * FROM movies; 
*/
select original_title , popularity from movies 
where genres ='Horror' order by popularity desc ; 

-- select original_title, popularity from movies 
-- where genres='Horror' order by popularity desc;

Q3. Selected Departments
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Write a query to find the details of those employees who work in the departments with numbers included in 30, 40, or 90.

Return the result ordered by employee_id in ascending order.
Table: employees
Schema

Sample Input:

Table: employees



Sample output:



Explanation: The above employees have department_id included in 30, 40, or 90.




/* YOUR QUERY GOES HERE
   Example: SELECT * FROM departments; 
*/

select employee_id , first_name , job_id , department_id from 
employees where department_id in(30,40,90)
order by employee_id ; 

Q4. Office Codes
SQL
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Statement:

Write a query to find the employees whose officeCodes are not included in 4,6,7.

Return the result ordered by firstName and lastName in ascending order.
Table: employees
Schema

Sample Input:

Table: employees



Sample output:



Explanation: The above table shows the employees whose office codes are not 4,6 or 7.




/* YOUR QUERY GOES HERE
   Example: SELECT * FROM employees; 
*/

select firstName, lastName, jobTitle FROM
employees where officeCode not in(4,6,7)
order by firstName , lastName ;  



